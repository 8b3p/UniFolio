{"ast":null,"code":"module.exports.totalBalance = (balance, currentUser) => {\n  return (balance * (currentUser.percentage / 100) - (balance * (currentUser.percentage / 100) - currentUser.capital) * ((100 - currentUser.profit) / 100)).toFixed(2);\n};\n\nmodule.exports.commissionedTotalBalance = (balance, currentUser, commissioned) => {\n  let total = 0;\n\n  for (let i = 0; i < commissioned.length; i++) {\n    let result = parseFloat((balance * (commissioned[i].percentage / 100) - commissioned[i].capital) * ((100 - commissioned[i].profit) / 100));\n    total += result;\n  }\n\n  return (balance * (currentUser.percentage / 100) - (balance * (currentUser.percentage / 100) - currentUser.capital) * ((100 - currentUser.profit) / 100) + total).toFixed(2);\n};\n\nmodule.exports.profit = (balance, currentUser) => {\n  let profit = ((balance * (currentUser.percentage / 100) - currentUser.capital) * (currentUser.profit / 100)).toFixed(2);\n  let percentage = ((balance * (currentUser.percentage / 100) - currentUser.capital) * (currentUser.profit / 100) * 100 / currentUser.capital).toFixed(2);\n  return `${profit} (${percentage}%)`;\n};\n\nmodule.exports.commissionProfit = (balance, commissioned) => {\n  let total = 0;\n\n  for (let i = 0; i < commissioned.length; i++) {\n    let result = parseFloat((balance * (commissioned[i].percentage / 100) - commissioned[i].capital) * ((100 - commissioned[i].profit) / 100));\n    total = total + result;\n  }\n\n  return `${total.toFixed(2)}$`;\n};\n\nmodule.exports.overallProfit = (balance, currentUser, commissioned) => {\n  let total = 0;\n\n  for (let i = 0; i < commissioned.length; i++) {\n    let result = parseFloat((balance * (commissioned[i].percentage / 100) - commissioned[i].capital) * ((100 - commissioned[i].profit) / 100));\n    total = total + result;\n  }\n\n  const overallProfit = ((balance * (currentUser.percentage / 100) - currentUser.capital) * (currentUser.profit / 100) + total).toFixed(2);\n  return `${overallProfit}$`;\n};","map":{"version":3,"sources":["/home/omair/development/my-binance/my-binance/src/utility/userCalcs.js"],"names":["module","exports","totalBalance","balance","currentUser","percentage","capital","profit","toFixed","commissionedTotalBalance","commissioned","total","i","length","result","parseFloat","commissionProfit","overallProfit"],"mappings":"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","sourcesContent":["module.exports.totalBalance = (balance, currentUser) => {\n  return ((balance * (currentUser.percentage / 100)) - (((balance * (currentUser.percentage / 100)) -\n    currentUser.capital) * ((100 - currentUser.profit) / 100))).toFixed(2)\n}\n\nmodule.exports.commissionedTotalBalance = (balance, currentUser, commissioned) => {\n  let total = 0\n  for (let i = 0; i < commissioned.length; i++) {\n    let result = parseFloat(((((balance * (commissioned[i].percentage / 100)) - commissioned[i].capital) * ((100 -\n      commissioned[i].profit) / 100))))\n    total += result\n  }\n  return (((balance * (currentUser.percentage / 100)) - (((balance * (currentUser.percentage / 100)) -\n    currentUser.capital) * ((100 - currentUser.profit) / 100)) + total)).toFixed(2)\n}\n\nmodule.exports.profit = (balance, currentUser) => {\n  let profit = (((balance * (currentUser.percentage / 100)) - currentUser.capital) * (currentUser.profit /\n    100)).toFixed(2);\n  let percentage = (((((balance * (currentUser.percentage / 100)) - currentUser.capital) * (currentUser.profit /\n    100)) * 100) / (currentUser.capital)).toFixed(2)\n  return `${profit} (${percentage}%)`\n}\n\nmodule.exports.commissionProfit = (balance, commissioned) => {\n  let total = 0\n  for (let i = 0; i < commissioned.length; i++) {\n    let result = parseFloat(((((balance * (commissioned[i].percentage / 100)) - commissioned[i].capital) * ((100 -\n      commissioned[i].profit) / 100))))\n    total = total + result\n  }\n  return `${total.toFixed(2)}$`\n}\n\nmodule.exports.overallProfit = (balance, currentUser, commissioned) => {\n  let total = 0\n  for (let i = 0; i < commissioned.length; i++) {\n    let result = parseFloat(((((balance * (commissioned[i].percentage / 100)) - commissioned[i].capital) * ((100 -\n      commissioned[i].profit) / 100))))\n    total = total + result\n  }\n  const overallProfit = ((((balance * (currentUser.percentage / 100)) - currentUser.capital) * (currentUser.profit / 100))\n    + total).toFixed(2)\n  return `${overallProfit}$`\n}"]},"metadata":{},"sourceType":"module"}